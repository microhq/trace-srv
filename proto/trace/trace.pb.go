// Code generated by protoc-gen-go.
// source: github.com/micro/trace-srv/proto/trace/trace.proto
// DO NOT EDIT!

/*
Package trace is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/trace-srv/proto/trace/trace.proto

It has these top-level messages:
	CreateRequest
	CreateResponse
	ReadRequest
	ReadResponse
	DeleteRequest
	DeleteResponse
	SearchRequest
	SearchResponse
*/
package trace

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import trace1 "github.com/micro/go-platform/trace/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type CreateRequest struct {
	Span *trace1.Span `protobuf:"bytes,1,opt,name=span" json:"span,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRequest) GetSpan() *trace1.Span {
	if m != nil {
		return m.Span
	}
	return nil
}

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ReadRequest struct {
	// trace id
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ReadResponse struct {
	Spans []*trace1.Span `protobuf:"bytes,1,rep,name=spans" json:"spans,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadResponse) GetSpans() []*trace1.Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

type DeleteRequest struct {
	// trace id
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SearchRequest struct {
	Limit   int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset  int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Reverse bool  `protobuf:"varint,3,opt,name=reverse" json:"reverse,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SearchResponse struct {
	Spans []*trace1.Span `protobuf:"bytes,1,rep,name=spans" json:"spans,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SearchResponse) GetSpans() []*trace1.Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "CreateResponse")
	proto.RegisterType((*ReadRequest)(nil), "ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "ReadResponse")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "SearchResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Trace service

type TraceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
}

type traceClient struct {
	c           client.Client
	serviceName string
}

func NewTraceClient(serviceName string, c client.Client) TraceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "trace"
	}
	return &traceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *traceClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Trace.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traceClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Trace.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Trace.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traceClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Trace.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Trace service

type TraceHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
}

func RegisterTraceHandler(s server.Server, hdlr TraceHandler) {
	s.Handle(s.NewHandler(&Trace{hdlr}))
}

type Trace struct {
	TraceHandler
}

func (h *Trace) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.TraceHandler.Create(ctx, in, out)
}

func (h *Trace) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.TraceHandler.Read(ctx, in, out)
}

func (h *Trace) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.TraceHandler.Delete(ctx, in, out)
}

func (h *Trace) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.TraceHandler.Search(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x51, 0xcd, 0x4e, 0xf3, 0x30,
	0x10, 0xec, 0x5f, 0xf2, 0x7d, 0x6c, 0x9b, 0x14, 0x19, 0x0e, 0x21, 0x5c, 0x50, 0x04, 0x08, 0x09,
	0xd5, 0x91, 0x02, 0x77, 0x0e, 0xf0, 0x04, 0x2d, 0x2f, 0xe0, 0xa6, 0x9b, 0x36, 0x52, 0x52, 0x07,
	0xdb, 0xed, 0x9b, 0xf1, 0x7e, 0x38, 0x76, 0xa2, 0x26, 0x45, 0xe2, 0x62, 0x69, 0x77, 0x67, 0x66,
	0x77, 0xc6, 0x90, 0x6c, 0x73, 0xb5, 0x3b, 0xac, 0x69, 0xca, 0xcb, 0xb8, 0xcc, 0x53, 0xc1, 0x63,
	0x25, 0x58, 0x8a, 0x0b, 0x29, 0x8e, 0x71, 0x25, 0xb8, 0x6a, 0x6a, 0xfb, 0x52, 0xd3, 0x09, 0x5f,
	0x7f, 0x71, 0xb6, 0x7c, 0x51, 0x15, 0x4c, 0x65, 0x5c, 0x94, 0x0d, 0xbe, 0xc3, 0xb5, 0xac, 0xe8,
	0x1e, 0xbc, 0x77, 0x81, 0x4c, 0xe1, 0x12, 0xbf, 0x0e, 0x28, 0x15, 0xb9, 0x82, 0x89, 0xac, 0xd8,
	0x3e, 0x18, 0xde, 0x0d, 0x9f, 0xa6, 0x89, 0x43, 0x57, 0xba, 0x88, 0x2e, 0xc1, 0x6f, 0x51, 0xb2,
	0xe2, 0x7b, 0x89, 0xd1, 0x0d, 0x4c, 0x97, 0xc8, 0x36, 0x2d, 0x0b, 0x60, 0x94, 0x6f, 0x0c, 0xe7,
	0x42, 0x4b, 0xce, 0xec, 0xc8, 0x42, 0xc9, 0x35, 0x38, 0xb5, 0xa2, 0xd4, 0xe3, 0xf1, 0x49, 0xf2,
	0x16, 0xbc, 0x0f, 0x2c, 0xf0, 0xb4, 0xb8, 0x2b, 0xa1, 0xf7, 0xb5, 0xc3, 0x66, 0xdf, 0x1b, 0x78,
	0x2b, 0x64, 0x22, 0xdd, 0xb5, 0x70, 0x0f, 0x9c, 0x22, 0x2f, 0x73, 0x65, 0x18, 0x63, 0xe2, 0x83,
	0xcb, 0xb3, 0x4c, 0xa2, 0x0a, 0x46, 0xa6, 0x9e, 0xc3, 0x3f, 0x81, 0x47, 0x14, 0x12, 0x83, 0xb1,
	0x6e, 0xfc, 0x8f, 0x1e, 0xc1, 0x6f, 0x05, 0xfe, 0xba, 0x2b, 0xf9, 0x1e, 0x82, 0xf3, 0x59, 0x07,
	0x44, 0x9e, 0xc1, 0xb5, 0xa6, 0x89, 0x4f, 0x7b, 0x19, 0x85, 0x73, 0x7a, 0x96, 0xc6, 0x80, 0x3c,
	0xc0, 0xa4, 0x36, 0x4d, 0x66, 0xb4, 0x13, 0x4b, 0xe8, 0xd1, 0x6e, 0x12, 0x1a, 0xa6, 0x35, 0xad,
	0x31, 0xad, 0xd9, 0xb3, 0xaf, 0x35, 0xcf, 0x1c, 0x1b, 0xb0, 0x3d, 0x59, 0x83, 0x7b, 0xe6, 0x35,
	0xb8, 0xef, 0x25, 0x1a, 0xac, 0x5d, 0xf3, 0x9f, 0x2f, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68,
	0xae, 0xd7, 0x89, 0x3b, 0x02, 0x00, 0x00,
}
